;递归
(define (accumulate combiner null-value term a next b)
    (if (> a b)
        null-value
        (combiner (term a)
            (accumulate combiner null-value term (next a) next b))))

;累和
(define (sum term a next b)
    (accumulate + 0 term a next b))
;累积
(define (product term a next b)
    (accumulate * 1 term a next b))

;迭代
(define (accumulate combiner product term a next b)
    (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
    (iter a null-value))

;累和    
(define (sum term a next b)
    (accumulate + 0 term a next b))
;累积
(define (product term a next b)
    (accumulate * 1 term a next b))  