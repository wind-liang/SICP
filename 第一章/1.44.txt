(define (compose f g ) (lambda (x) (f (g x))))
(define dx 0.00001)
(define (repeated f n)
    (if (= n 1)
        f
        (compose f (repeated f (- n 1)))))
        
(define (smooth f)
    (lambda (x)
        (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))
        
(define (smooth-n f n)
    (let ((smooth-n-times (repeated smooth n)))
        (smooth-n-times  f)))