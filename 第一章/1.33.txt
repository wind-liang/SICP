;递归
(define (filtered-accumulate combiner filter  null-value term a next b)
    (if (> a b)
        null-value
        (if (filter a)
            (combiner (term a)
                (filtered-accumulate combiner filter null-value term (next a) next b))
            (combiner null-value
                (filtered-accumulate combiner filter null-value term (next a) next b)))))
             
    
(define (identity x) x)    
(define (inc x) (+ 1 x))  

;求素数
(define (square x) (* x x)) 
(define (smallest-divisor n)
    (find-divisor n 2))
(define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n)
            n)
          ((divides? test-divisor n)
            test-divisor)
          (else
            (find-divisor n (+ test-divisor 1)))))    
(define (divides? a b)
    (= (remainder b a) 0))
(define (prime? n)
    (= n (smallest-divisor n)))    
    
;a 到 b 的所有素数和    
(define (ap a b)
    (filtered-accumulate + prime? 0 identity a inc b))
    
    
;由于新的 filter 需要两个参数所以新写了一个
(define (filtered-accumulate2 combiner filter  null-value term a next b)
    (if (> a b)
        null-value
        (if (filter a b)
            (combiner (term a)
                (filtered-accumulate2 combiner filter null-value term (next a) next b))
            (combiner null-value
                (filtered-accumulate2 combiner filter null-value term (next a) next b)))))   
;求最大公约数
(define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
(define (prime-withn? a n)
    (= (gcd a n) 1))

;小于 n 的与 n 互素的正整数乘积
(define (bm n)
    (filtered-accumulate2 * prime-withn? 1 identity 1 inc n))
        